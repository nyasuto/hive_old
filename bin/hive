#!/usr/bin/env python3
"""
Hive CLI - Command Line Interface for Hive Multi-Agent System
新しいCLIベースのアーキテクチャ実装

基本コマンド:
  hive send <recipient> "<message>"     - メッセージ送信
  hive who-am-i                         - 現在のWorker名を表示
  hive status                           - Hiveの状態確認
  hive broadcast "<message>"            - 全Worker宛てにメッセージ送信
  hive urgent <recipient> "<message>"   - 緊急メッセージ送信
"""

import argparse
import sys
import os
from pathlib import Path

# プロジェクトルートを追加
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from hive.cli_core import HiveCLI


def main():
    """メイン実行関数"""
    parser = argparse.ArgumentParser(
        prog="hive",
        description="Hive Multi-Agent System CLI",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
基本的な使用方法:
  hive bootstrap web-app "タスク管理アプリ"
  hive send backend "新しいAPIエンドポイントを実装してください"
  hive who-am-i
  hive my-role
  hive remind-me
  hive status
  hive tmux-status
  hive save-tmux-mapping
  hive broadcast "プロジェクトの進捗を報告してください"
  hive urgent queen "緊急：サーバーがダウンしています"
        """,
    )
    
    # サブコマンドの定義
    subparsers = parser.add_subparsers(dest="command", help="利用可能なコマンド")
    
    # send コマンド
    send_parser = subparsers.add_parser("send", help="特定のWorkerにメッセージを送信")
    send_parser.add_argument("recipient", help="送信先Worker名 (queen, architect, frontend, backend, devops, tester)")
    send_parser.add_argument("message", help="送信するメッセージ")
    
    # who-am-i コマンド
    subparsers.add_parser("who-am-i", help="現在のWorker名を表示")
    
    # status コマンド
    subparsers.add_parser("status", help="Hiveの状態確認")
    
    # broadcast コマンド
    broadcast_parser = subparsers.add_parser("broadcast", help="全Workerにメッセージを送信")
    broadcast_parser.add_argument("message", help="送信するメッセージ")
    
    # urgent コマンド
    urgent_parser = subparsers.add_parser("urgent", help="緊急メッセージを送信")
    urgent_parser.add_argument("recipient", help="送信先Worker名")
    urgent_parser.add_argument("message", help="緊急メッセージ")
    
    # bootstrap コマンド
    bootstrap_parser = subparsers.add_parser("bootstrap", help="プロジェクトをブートストラップ")
    bootstrap_parser.add_argument("project_type", help="プロジェクトタイプ (web-app, api-only, data-analysis, simple-site)")
    bootstrap_parser.add_argument("project_name", help="プロジェクト名")
    
    # my-role コマンド
    subparsers.add_parser("my-role", help="完全な役割定義を表示")
    
    # remind-me コマンド
    subparsers.add_parser("remind-me", help="現在の役割とタスクを確認")
    
    # tmux-status コマンド
    subparsers.add_parser("tmux-status", help="詳細なtmux状態を表示")
    
    # save-tmux-mapping コマンド
    subparsers.add_parser("save-tmux-mapping", help="現在のtmuxマッピングを保存")
    
    # 引数がない場合はヘルプを表示
    if len(sys.argv) == 1:
        parser.print_help()
        sys.exit(1)
    
    args = parser.parse_args()
    
    # CLIインスタンスの作成
    cli = HiveCLI()
    
    # コマンドの実行
    try:
        if args.command == "send":
            cli.send_message(args.recipient, args.message)
        elif args.command == "who-am-i":
            cli.who_am_i_detailed()
        elif args.command == "status":
            cli.status()
        elif args.command == "broadcast":
            cli.broadcast_message(args.message)
        elif args.command == "urgent":
            cli.urgent_message(args.recipient, args.message)
        elif args.command == "bootstrap":
            cli.bootstrap_project(args.project_type, args.project_name)
        elif args.command == "my-role":
            cli.show_my_role()
        elif args.command == "remind-me":
            cli.remind_me()
        elif args.command == "tmux-status":
            cli.tmux_status()
        elif args.command == "save-tmux-mapping":
            cli.save_tmux_mapping()
        else:
            parser.print_help()
            sys.exit(1)
    except Exception as e:
        print(f"❌ エラー: {e}", file=sys.stderr)
        sys.exit(1)


if __name__ == "__main__":
    main()