#!/bin/bash
# Hive Project - Enhanced Pre-commit Hook
# Based on ../beaver project git-hooks best practices

set -e

echo "🪝 Pre-commit フック実行中..."

# 現在のブランチ名を取得
current_branch=$(git symbolic-ref --short HEAD 2>/dev/null || echo "")

# mainブランチへの直接コミット禁止
if [ "$current_branch" = "main" ]; then
    echo "❌ エラー: mainブランチへの直接コミットは禁止されています"
    echo ""
    echo "   🔄 機能ブランチを作成してください:"
    echo "   git checkout -b feat/your-feature-name"
    echo ""
    echo "   📋 Hiveプロジェクトのブランチ命名規則:"
    echo "   - feat/issue-X-feature-name     (新機能)"
    echo "   - fix/issue-X-description       (バグ修正)"
    echo "   - docs/X-description            (ドキュメント)"
    echo "   - refactor/X-description        (リファクタリング)"
    echo "   - test/X-description            (テスト)"
    echo "   - ci/X-description              (CI/CD)"
    echo "   - claude/X-description          (Claude Code作業)"
    echo ""
    exit 1
fi

# ブランチ命名規則チェック（mainブランチ以外）
if [ "$current_branch" != "main" ]; then
    valid_patterns="^(feat|fix|hotfix|test|docs|ci|cicd|refactor|perf|security|deps|claude)/"
    if ! echo "$current_branch" | grep -qE "$valid_patterns"; then
        echo "❌ エラー: ブランチ名が命名規則に従っていません: $current_branch"
        echo ""
        echo "   📋 正しいブランチ命名形式:"
        echo "   - feat/issue-X-feature-name     (新機能)"
        echo "   - fix/issue-X-description       (バグ修正)"
        echo "   - docs/X-description            (ドキュメント)"
        echo "   - refactor/X-description        (リファクタリング)"
        echo "   - test/X-description            (テスト)"
        echo "   - ci/cicd/X-description         (CI/CD)"
        echo "   - perf/X-description            (パフォーマンス)"
        echo "   - security/X-description        (セキュリティ)"
        echo "   - deps/X-description            (依存関係)"
        echo "   - claude/X-description          (Claude Code作業)"
        echo ""
        echo "   🔄 ブランチ名を変更するには:"
        echo "   git branch -m $current_branch feat/issue-X-description"
        echo ""
        exit 1
    fi
fi

# Makefileの変更がある場合
makefile_changed=$(git diff --cached --name-only | grep -E '^Makefile$' || true)
if [ -n "$makefile_changed" ]; then
    echo "🔧 Makefile構文チェック..."
    if ! make -n help >/dev/null 2>&1; then
        echo "❌ エラー: Makefile構文エラーがあります"
        exit 1
    fi
    echo "✅ Makefile構文チェック完了"
fi


# 品質チェック実行
echo "🔍 品質チェック実行中..."
if ! make quality >/dev/null 2>&1; then
    echo "❌ エラー: 品質チェックに失敗しました"
    echo "   make quality を実行して問題を修正してください"
    echo ""
    echo "   💡 自動修正を試すには:"
    echo "   make quality-fix"
    echo ""
    exit 1
fi

echo "✅ Pre-commit チェック完了"
echo "🚀 コミットを続行します..."