#!/bin/bash

# start-small-hive.sh - Small HiveËµ∑Âãï„Çπ„ÇØ„É™„Éó„Éà (Queen + Developer Worker)
# Issue #3 - tmux„Éô„Éº„ÇπSmall Colony (2 Workers)„Ç∑„Çπ„ÉÜ„É†

set -euo pipefail

# Ë®≠ÂÆö
HIVE_SESSION="hive-small-colony"
HIVE_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
WORKERS_DIR="$HIVE_DIR/workers"
PROMPTS_DIR="$WORKERS_DIR/prompts"
COMB_DIR="$HIVE_DIR/.hive"

# „É≠„Ç∞Ë®≠ÂÆö
LOG_DIR="$HIVE_DIR/.hive/logs"
LOG_FILE="$LOG_DIR/hive-startup-$(date +%Y%m%d-%H%M%S).log"

# Ëâ≤‰ªò„Åç„É≠„Ç∞Èñ¢Êï∞
log_info() {
    echo -e "\033[32m[INFO]\033[0m $1" | tee -a "$LOG_FILE"
}

log_warn() {
    echo -e "\033[33m[WARN]\033[0m $1" | tee -a "$LOG_FILE"
}

log_error() {
    echo -e "\033[31m[ERROR]\033[0m $1" | tee -a "$LOG_FILE"
}

log_step() {
    echo -e "\033[36m[STEP]\033[0m $1" | tee -a "$LOG_FILE"
}

# „Éò„É´„Éó„É°„ÉÉ„Çª„Éº„Ç∏
show_help() {
    cat << EOF
üêù Hive Small Colony Startup Script

Usage: $0 [OPTIONS]

OPTIONS:
    -h, --help          Show this help message
    -s, --size SIZE     Colony size (default: small)
    -d, --debug         Enable debug mode
    -n, --dry-run       Dry run mode (show commands without execution)
    -f, --force         Force startup even if session exists

EXAMPLES:
    $0                  # Start small colony (Queen + Developer)
    $0 --debug          # Start with debug output
    $0 --dry-run        # Show what would be executed
    $0 --force          # Force restart existing session

WORKERS:
    - Queen Worker (pane 0): Project management and coordination
    - Developer Worker (pane 1): Implementation and development work

DIRECTORIES:
    - Hive Directory: $HIVE_DIR
    - Workers Directory: $WORKERS_DIR
    - Prompts Directory: $PROMPTS_DIR
    - Comb Directory: $COMB_DIR

EOF
}

# ÂºïÊï∞Ëß£Êûê
COLONY_SIZE="small"
DEBUG_MODE=false
DRY_RUN=false
FORCE_START=false

while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            show_help
            exit 0
            ;;
        -s|--size)
            COLONY_SIZE="$2"
            shift 2
            ;;
        -d|--debug)
            DEBUG_MODE=true
            shift
            ;;
        -n|--dry-run)
            DRY_RUN=true
            shift
            ;;
        -f|--force)
            FORCE_START=true
            shift
            ;;
        *)
            log_error "Unknown option: $1"
            show_help
            exit 1
            ;;
    esac
done

# „Éá„Éê„ÉÉ„Ç∞„É¢„Éº„ÉâË®≠ÂÆö
if [[ "$DEBUG_MODE" == "true" ]]; then
    set -x
    log_info "Debug mode enabled"
fi

# ÂøÖË¶Å„Å™‰æùÂ≠òÈñ¢‰øÇ„ÉÅ„Çß„ÉÉ„ÇØ
check_dependencies() {
    log_step "Checking dependencies..."
    
    local deps=("tmux" "python3" "git")
    local missing_deps=()
    
    for dep in "${deps[@]}"; do
        if ! command -v "$dep" &> /dev/null; then
            missing_deps+=("$dep")
        fi
    done
    
    if [[ ${#missing_deps[@]} -gt 0 ]]; then
        log_error "Missing dependencies: ${missing_deps[*]}"
        log_error "Please install missing dependencies:"
        for dep in "${missing_deps[@]}"; do
            case $dep in
                tmux)
                    echo "  - macOS: brew install tmux"
                    echo "  - Ubuntu: sudo apt-get install tmux"
                    ;;
                python3)
                    echo "  - macOS: brew install python3"
                    echo "  - Ubuntu: sudo apt-get install python3"
                    ;;
                git)
                    echo "  - macOS: brew install git"
                    echo "  - Ubuntu: sudo apt-get install git"
                    ;;
            esac
        done
        exit 1
    fi
    
    log_info "All dependencies satisfied"
}

# „Éá„Ç£„É¨„ÇØ„Éà„É™ÊßãÈÄ†„ÅÆÁ¢∫Ë™ç„Éª‰ΩúÊàê
setup_directories() {
    log_step "Setting up directory structure..."
    
    local dirs=(
        "$COMB_DIR"
        "$LOG_DIR"
        "$COMB_DIR/comb"
        "$COMB_DIR/comb/messages"
        "$COMB_DIR/comb/messages/inbox"
        "$COMB_DIR/comb/messages/outbox"
        "$COMB_DIR/comb/messages/sent"
        "$COMB_DIR/comb/messages/failed"
        "$COMB_DIR/nectar"
        "$COMB_DIR/nectar/pending"
        "$COMB_DIR/nectar/active"
        "$COMB_DIR/nectar/completed"
        "$COMB_DIR/honey"
        "$COMB_DIR/work_logs"
        "$COMB_DIR/work_logs/daily"
        "$COMB_DIR/work_logs/projects"
    )
    
    for dir in "${dirs[@]}"; do
        if [[ "$DRY_RUN" == "true" ]]; then
            echo "mkdir -p \"$dir\""
        else
            mkdir -p "$dir"
        fi
    done
    
    log_info "Directory structure ready"
}

# Êó¢Â≠ò„Çª„ÉÉ„Ç∑„Éß„É≥„ÅÆÁ¢∫Ë™ç
check_existing_session() {
    log_step "Checking for existing Hive session..."
    
    if tmux has-session -t "$HIVE_SESSION" 2>/dev/null; then
        if [[ "$FORCE_START" == "true" ]]; then
            log_warn "Existing session found. Force mode enabled - terminating..."
            if [[ "$DRY_RUN" == "false" ]]; then
                tmux kill-session -t "$HIVE_SESSION"
            fi
        else
            log_error "Hive session '$HIVE_SESSION' already exists!"
            log_error "Use --force to restart, or run: tmux attach-session -t $HIVE_SESSION"
            exit 1
        fi
    fi
    
    log_info "No existing session found"
}

# WorkerÂ∞ÇÁî®„Éó„É≠„É≥„Éó„Éà„ÅÆ‰ΩúÊàê
create_worker_prompts() {
    log_step "Creating worker prompts..."
    
    # Queen Worker Prompt
    local queen_prompt="$PROMPTS_DIR/queen_worker.md"
    if [[ "$DRY_RUN" == "false" ]]; then
        cat > "$queen_prompt" << 'EOF'
# üêù Queen Worker - Project Management & Coordination

„ÅÇ„Å™„Åü„ÅØ**Queen Worker**„Åß„Åô„ÄÇHive Small Colony„ÅÆ„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Éû„Éç„Éº„Ç∏„É£„Éº„Å®„Åó„Å¶Developer Worker„Å®ÂçîË™ø„Åó„ÄÅÂäπÁéáÁöÑ„Å™ÈñãÁô∫„ÇíÊåáÊèÆ„Åó„Åæ„Åô„ÄÇ

## üéØ ‰∏ªË¶Å„Å™Ë≤¨‰ªª

### 1. „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÁÆ°ÁêÜ
- „Çø„Çπ„ÇØ„ÅÆË®àÁîª„Å®ÂÑ™ÂÖàÂ∫¶Ê±∫ÂÆö
- Developer Worker„Å∏„ÅÆ‰ΩúÊ•≠ÊåáÁ§∫
- ÈÄ≤ÊçóÁÆ°ÁêÜ„Å®ÂìÅË≥™Á¢∫‰øù
- ÊäÄË°ìÁöÑ„Å™ÊÑèÊÄùÊ±∫ÂÆö„ÅÆ„Çµ„Éù„Éº„Éà

### 2. CombÈÄö‰ø°„Ç∑„Çπ„ÉÜ„É†Ê¥ªÁî®
- „É°„ÉÉ„Çª„Éº„Ç∏ÈÄÅÂèó‰ø°„Å´„Çà„ÇãÂçîË™ø‰ΩúÊ•≠
- NectarÔºà„Çø„Çπ„ÇØÔºâ„ÅÆÈÖçÂ∏É„Å®ÁÆ°ÁêÜ
- HoneyÔºàÊàêÊûúÁâ©Ôºâ„ÅÆÂèéÈõÜ„Å®Ë©ï‰æ°
- ‰ΩúÊ•≠„É≠„Ç∞„ÅÆÁ∂≠ÊåÅ„Å®ÁÆ°ÁêÜ

### 3. ÂìÅË≥™‰øùË®º
- „Ç≥„Éº„Éâ„É¨„Éì„É•„Éº„Å®„Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØ
- „ÉÜ„Çπ„ÉàÊà¶Áï•„ÅÆÁ≠ñÂÆö
- „Éâ„Ç≠„É•„É°„É≥„ÉàÂìÅË≥™„ÅÆÁ¢∫‰øù
- ÊäÄË°ìÁöÑË≤†ÂÇµ„ÅÆÁÆ°ÁêÜ

## üîß ‰ΩøÁî®ÂèØËÉΩ„Å™„ÉÑ„Éº„É´

### Comb Communication API
```python
from comb import CombAPI

# APIÂàùÊúüÂåñ
queen_api = CombAPI("queen")

# „Çø„Çπ„ÇØÈñãÂßã
task_id = queen_api.start_task(
    "Êñ∞Ê©üËÉΩÂÆüË£Ö",
    task_type="feature",
    issue_number=25,
    workers=["queen", "developer"]
)

# Developer Worker„Å∏„ÅÆÊåáÁ§∫
queen_api.send_message(
    to_worker="developer",
    content={
        "task": "„É¶„Éº„Ç∂„ÉºË™çË®ºÊ©üËÉΩ„ÅÆÂÆüË£Ö",
        "priority": "high",
        "requirements": ["JWTË™çË®º", "„Éë„Çπ„ÉØ„Éº„Éâ„Éè„ÉÉ„Ç∑„É•Âåñ"],
        "deadline": "2024-01-15"
    },
    message_type=MessageType.REQUEST,
    priority=MessagePriority.HIGH
)

# ÈÄ≤ÊçóÁ¢∫Ë™ç
progress = queen_api.add_progress("Ë¶Å‰ª∂ÂÆöÁæ©ÂÆå‰∫Ü", "ÊäÄË°ì‰ªïÊßòÊõ∏‰ΩúÊàê‰∏≠")
```

## üöÄ ÈñãÂßãÊôÇ„ÅÆË°åÂãï

1. **Áí∞Â¢ÉÁ¢∫Ë™ç**: ÈñãÁô∫Áí∞Â¢É„Å®„ÉÑ„Éº„É´„ÅÆÂãï‰ΩúÁ¢∫Ë™ç
2. **CombÊé•Á∂ö**: Developer Worker„Å®„ÅÆÈÄö‰ø°Á¢∫Á´ã
3. **„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÁä∂Ê≥ÅÊääÊè°**: ÁèæÂú®„ÅÆÈÄ≤Êçó„Å®Ë™≤È°å„ÅÆÁ¢∫Ë™ç
4. **„Çø„Çπ„ÇØË®àÁîª**: Ê¨°„ÅÆ‰ΩúÊ•≠È†ÖÁõÆ„ÅÆË®àÁîª„Å®ÂÑ™ÂÖàÂ∫¶Ë®≠ÂÆö

## üí° ÂçîË™ø‰ΩúÊ•≠„ÅÆ„Éô„Çπ„Éà„Éó„É©„ÇØ„ÉÜ„Ç£„Çπ

- **ÊòéÁ¢∫„Å™ÊåáÁ§∫**: ÂÖ∑‰ΩìÁöÑ„ÅßÂÆüË°åÂèØËÉΩ„Å™ÊåáÁ§∫„ÇíÊèê‰æõ
- **ÂÆöÊúüÁöÑ„Å™Á¢∫Ë™ç**: ÈÄ≤ÊçóÁä∂Ê≥Å„ÇíÂÆöÊúüÁöÑ„Å´„ÉÅ„Çß„ÉÉ„ÇØ
- **„Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØ**: Âª∫Ë®≠ÁöÑ„ÅßÂÖ∑‰ΩìÁöÑ„Å™„Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØ„ÇíÊèê‰æõ
- **ÊüîËªüÊÄß**: Áä∂Ê≥Å„Å´Âøú„Åò„ÅüË®àÁîªË™øÊï¥

## üéâ ÊàêÂäüÊåáÊ®ô

- Developer Worker„Å®„ÅÆÂäπÊûúÁöÑ„Å™ÂçîË™ø
- „Çø„Çπ„ÇØ„ÅÆÊôÇÈñìÈÄö„Çä„ÅÆÂÆå‰∫Ü
- È´òÂìÅË≥™„Å™ÊàêÊûúÁâ©„ÅÆÁîüÊàê
- ÊäÄË°ìÁöÑË™≤È°å„ÅÆËøÖÈÄü„Å™Ëß£Ê±∫

**„ÅÇ„Å™„Åü„ÅÆ‰ΩøÂëΩ**: ÂäπÁéáÁöÑ„Åß„Çπ„É†„Éº„Ç∫„Å™ÈñãÁô∫„Éó„É≠„Çª„Çπ„ÇíÂÆüÁèæ„Åó„ÄÅ„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅÆÊàêÂäü„ÇíÂ∞é„Åè„Åì„Å®„Åß„Åô„ÄÇDeveloper Worker„Å®ÂçîÂäõ„Åó„Å¶„ÄÅÁ¥†Êô¥„Çâ„Åó„ÅÑ„ÇΩ„Éï„Éà„Ç¶„Çß„Ç¢„Çí‰Ωú„Çä‰∏ä„Åí„Åæ„Åó„Çá„ÅÜÔºÅ
EOF
    fi
    
    # Developer Worker Prompt
    local developer_prompt="$PROMPTS_DIR/developer_worker.md"
    if [[ "$DRY_RUN" == "false" ]]; then
        cat > "$developer_prompt" << 'EOF'
# üíª Developer Worker - Implementation & Development

„ÅÇ„Å™„Åü„ÅØ**Developer Worker**„Åß„Åô„ÄÇHive Small Colony„Å´„Åä„ÅÑ„Å¶Queen Worker„Å®ÂçîË™ø„Åó„ÄÅÈ´òÂìÅË≥™„Å™„Ç≥„Éº„Éâ„ÅÆÂÆüË£Ö„Å®ÈñãÁô∫‰ΩúÊ•≠„ÇíÊãÖÂΩì„Åó„Åæ„Åô„ÄÇ

## üéØ ‰∏ªË¶Å„Å™Ë≤¨‰ªª

### 1. „Ç≥„Éº„ÉâÂÆüË£Ö
- Ê©üËÉΩ„ÅÆË®≠Ë®à„Å®ÂÆüË£Ö
- „Éê„Ç∞‰øÆÊ≠£„Å®ÊîπÂñÑ
- „Ç≥„Éº„Éâ„ÅÆÊúÄÈÅ©Âåñ
- „ÉÜ„Çπ„Éà„Ç≥„Éº„Éâ„ÅÆ‰ΩúÊàê

### 2. ÊäÄË°ìÁöÑÂÆüË°å
- „Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉÅ„É£„ÅÆÂÆüË£Ö
- „É©„Ç§„Éñ„É©„É™„Å®„Éï„É¨„Éº„É†„ÉØ„Éº„ÇØ„ÅÆÊ¥ªÁî®
- „Éë„Éï„Ç©„Éº„Éû„É≥„Çπ„ÅÆÊúÄÈÅ©Âåñ
- „Çª„Ç≠„É•„É™„ÉÜ„Ç£„ÅÆÁ¢∫‰øù

### 3. ÂìÅË≥™ÁÆ°ÁêÜ
- „Ç≥„Éº„Éá„Ç£„É≥„Ç∞Ë¶èÁ¥Ñ„ÅÆÈÅµÂÆà
- „ÉÜ„Çπ„Éà„ÅÆÂÆüË°å„Å®ÂìÅË≥™Á¢∫‰øù
- „Éâ„Ç≠„É•„É°„É≥„ÉÜ„Éº„Ç∑„Éß„É≥
- „É™„Éï„Ç°„ÇØ„Çø„É™„É≥„Ç∞

## üîß ‰ΩøÁî®ÂèØËÉΩ„Å™„ÉÑ„Éº„É´

### Comb Communication API
```python
from comb import CombAPI

# APIÂàùÊúüÂåñ
developer_api = CombAPI("developer")

# Queen Worker„Åã„Çâ„ÅÆ„Çø„Çπ„ÇØÂèó‰ø°
messages = developer_api.receive_messages()
for message in messages:
    if message.message_type == MessageType.REQUEST:
        # „Çø„Çπ„ÇØ„ÅÆÂÆüË°å
        task_content = message.content
        # ÂÆüË£Ö‰ΩúÊ•≠...
        
        # ÈÄ≤ÊçóÂ†±Âëä
        developer_api.send_response(
            message,
            {
                "status": "in_progress",
                "completed_features": ["Ë™çË®ºAPI", "„É¶„Éº„Ç∂„ÉºÁÆ°ÁêÜ"],
                "next_steps": ["„Éë„Çπ„ÉØ„Éº„Éâ„É™„Çª„ÉÉ„ÉàÊ©üËÉΩ"]
            }
        )

# ÊäÄË°ìÁöÑÊ±∫ÂÆö„ÅÆË®òÈå≤
developer_api.add_technical_decision(
    "JWTË™çË®º„É©„Ç§„Éñ„É©„É™„ÅÆÈÅ∏Êäû",
    "„Çª„Ç≠„É•„É™„ÉÜ„Ç£„Å®ÊÄßËÉΩ„ÅÆ„Éê„É©„É≥„Çπ„ÇíËÄÉÊÖÆ",
    ["PyJWT", "python-jose", "authlib"]
)
```

### ÈñãÁô∫„ÉÑ„Éº„É´
- **ÂìÅË≥™„ÉÅ„Çß„ÉÉ„ÇØ**: `make quality` (lint, format, type-check)
- **„ÉÜ„Çπ„ÉàÂÆüË°å**: `make test` „Åæ„Åü„ÅØ `make test-cov`
- **„Ç≥„Éº„ÉâÊï¥ÂΩ¢**: `ruff format .`
- **Âûã„ÉÅ„Çß„ÉÉ„ÇØ**: `mypy .`

## üöÄ ÈñãÂßãÊôÇ„ÅÆË°åÂãï

1. **Áí∞Â¢ÉÁ¢∫Ë™ç**: ÈñãÁô∫Áí∞Â¢É„Å®„ÉÑ„Éº„É´„ÅÆÂãï‰ΩúÁ¢∫Ë™ç
2. **CombÊé•Á∂ö**: Queen Worker„Å®„ÅÆÈÄö‰ø°Á¢∫Á´ã
3. **„Çø„Çπ„ÇØÁ¢∫Ë™ç**: ÁèæÂú®„ÅÆ„Çø„Çπ„ÇØ„Å®ÂÑ™ÂÖàÂ∫¶„ÅÆÁ¢∫Ë™ç
4. **ÂÆüË£ÖÈñãÂßã**: ÊåáÁ§∫„Åï„Çå„Åü„Çø„Çπ„ÇØ„ÅÆÂÆüË£ÖÈñãÂßã

## üí° ÂÆüË£Ö„ÅÆ„Éô„Çπ„Éà„Éó„É©„ÇØ„ÉÜ„Ç£„Çπ

### „Ç≥„Éº„ÉâÂìÅË≥™
- **Âûã„Ç¢„Éé„ÉÜ„Éº„Ç∑„Éß„É≥**: ÂÖ®„Å¶„ÅÆÈñ¢Êï∞„Å´Âûã„Éí„É≥„Éà„Çí‰ªò‰∏é
- **docstring**: Èñ¢Êï∞„Å®„ÇØ„É©„Çπ„Å´ÊòéÁ¢∫„Å™Ë™¨Êòé„ÇíË®òËø∞
- **„Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞**: ÈÅ©Âàá„Å™‰æãÂ§ñÂá¶ÁêÜ„ÇíÂÆüË£Ö
- **„ÉÜ„Çπ„Éà„Ç´„Éê„É¨„ÉÉ„Ç∏**: ÈáçË¶Å„Å™Ê©üËÉΩ„ÅÆ„ÉÜ„Çπ„Éà„Çí‰ΩúÊàê

### ÂçîË™ø‰ΩúÊ•≠
- **ÈÄ≤ÊçóÂ†±Âëä**: ÂÆöÊúüÁöÑ„Å™ÈÄ≤ÊçóÁä∂Ê≥Å„ÅÆÂÖ±Êúâ
- **Ë≥™Âïè**: ‰∏çÊòé„Å™ÁÇπ„ÅØÁ©çÊ•µÁöÑ„Å´Ë≥™Âïè
- **ÊèêÊ°à**: ÊäÄË°ìÁöÑ„Å™ÊîπÂñÑÊèêÊ°à„ÇíÁ©çÊ•µÁöÑ„Å´Ë°å„ÅÜ
- **„Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØ**: Queen Worker„Åã„Çâ„ÅÆ„Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØ„ÇíÊ¥ªÁî®

## üéâ ÊàêÂäüÊåáÊ®ô

- Queen Worker„Å®„ÅÆÂäπÊûúÁöÑ„Å™ÂçîË™ø
- È´òÂìÅË≥™„Å™„Ç≥„Éº„Éâ„ÅÆÁ∂ôÁ∂öÁöÑ„Å™Êèê‰æõ
- „Éê„Ç∞„ÅÆÂ∞ë„Å™„ÅÑÂÆâÂÆö„Åó„ÅüÂÆüË£Ö
- ÊäÄË°ìÁöÑË™≤È°å„ÅÆËøÖÈÄü„Å™Ëß£Ê±∫

**„ÅÇ„Å™„Åü„ÅÆ‰ΩøÂëΩ**: Queen Worker„ÅÆÊåáÁ§∫„Å´Âü∫„Å•„ÅÑ„Å¶„ÄÅÈ´òÂìÅË≥™„Åß‰øùÂÆàÊÄß„ÅÆÈ´ò„ÅÑ„Ç≥„Éº„Éâ„ÇíÂÆüË£Ö„Åó„ÄÅ„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅÆÊäÄË°ìÁöÑ„Å™ÊàêÂäü„ÇíÊîØ„Åà„Çã„Åì„Å®„Åß„Åô„ÄÇÁ¥†Êô¥„Çâ„Åó„ÅÑ„ÇΩ„Éï„Éà„Ç¶„Çß„Ç¢„Çí‰∏ÄÁ∑í„Å´‰Ωú„Çä‰∏ä„Åí„Åæ„Åó„Çá„ÅÜÔºÅ
EOF
    fi
    
    log_info "Worker prompts created successfully"
}

# tmux„Çª„ÉÉ„Ç∑„Éß„É≥„ÅÆ‰ΩúÊàê„Å®WorkerËµ∑Âãï
create_tmux_session() {
    log_step "Creating tmux session and starting workers..."
    
    if [[ "$DRY_RUN" == "true" ]]; then
        echo "tmux new-session -d -s $HIVE_SESSION -c $HIVE_DIR"
        echo "tmux split-window -h -t $HIVE_SESSION"
        echo "tmux send-keys -t $HIVE_SESSION:0.0 'cd $HIVE_DIR && ./scripts/wake-workers.sh queen' Enter"
        echo "tmux send-keys -t $HIVE_SESSION:0.1 'cd $HIVE_DIR && ./scripts/wake-workers.sh developer' Enter"
        return
    fi
    
    # tmux„Çª„ÉÉ„Ç∑„Éß„É≥‰ΩúÊàê
    tmux new-session -d -s "$HIVE_SESSION" -c "$HIVE_DIR"
    
    # „É¶„Éº„Ç∂„Éº„Éï„É¨„É≥„Éâ„É™„Éº„Å™tmuxË®≠ÂÆö
    tmux set -g mouse on  # „Éû„Ç¶„Çπ„É¢„Éº„ÉâÊúâÂäπÂåñ
    tmux bind -n M-Left select-pane -L   # Alt+Â∑¶Áü¢Âç∞„ÅßÂ∑¶pane
    tmux bind -n M-Right select-pane -R  # Alt+Âè≥Áü¢Âç∞„ÅßÂè≥pane
    tmux set -g status-left "[#S] "  # „Çª„ÉÉ„Ç∑„Éß„É≥ÂêçË°®Á§∫
    tmux set -g status-right "#{?window_bigger,[#{window_width}x#{window_height}],} %H:%M %d-%b-%y"
    
    # Ê∞¥Âπ≥ÂàÜÂâ≤„ÅßDeveloper WorkerÁî®„ÅÆpane„Çí‰ΩúÊàê
    tmux split-window -h -t "$HIVE_SESSION"
    
    # pane„ÅÆ„Çø„Ç§„Éà„É´Ë®≠ÂÆö
    tmux rename-window -t "$HIVE_SESSION:0" "Hive-Small-Colony"
    
    # ÂêÑpane„ÅßWorker„ÇíËµ∑Âãï
    tmux send-keys -t "$HIVE_SESSION:0.0" "cd $HIVE_DIR && ./scripts/wake-workers.sh queen" Enter
    tmux send-keys -t "$HIVE_SESSION:0.1" "cd $HIVE_DIR && ./scripts/wake-workers.sh developer" Enter
    
    # ÂàùÊúü„Éï„Ç©„Éº„Ç´„Çπ„ÇíQueen Worker„Å´Ë®≠ÂÆö
    tmux select-pane -t "$HIVE_SESSION:0.0"
    
    log_info "tmux session created with 2 workers"
}

# Ëµ∑ÂãïÂæå„ÅÆÁä∂Ê≥ÅÁ¢∫Ë™ç
verify_startup() {
    log_step "Verifying startup..."
    
    if [[ "$DRY_RUN" == "true" ]]; then
        echo "tmux list-sessions"
        echo "tmux list-panes -t $HIVE_SESSION"
        return
    fi
    
    # tmux„Çª„ÉÉ„Ç∑„Éß„É≥„ÅÆÁ¢∫Ë™ç
    if tmux has-session -t "$HIVE_SESSION" 2>/dev/null; then
        log_info "‚úÖ tmux session '$HIVE_SESSION' is running"
        
        # paneÊï∞„ÅÆÁ¢∫Ë™ç
        local pane_count
        pane_count=$(tmux list-panes -t "$HIVE_SESSION" | wc -l)
        if [[ "$pane_count" -eq 2 ]]; then
            log_info "‚úÖ 2 panes created successfully"
        else
            log_warn "‚ö†Ô∏è Expected 2 panes, found $pane_count"
        fi
    else
        log_error "‚ùå tmux session not found"
        return 1
    fi
    
    # Comb„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅÆÁ¢∫Ë™ç
    if [[ -d "$COMB_DIR" ]]; then
        log_info "‚úÖ Comb directory structure ready"
    else
        log_error "‚ùå Comb directory not found"
        return 1
    fi
    
    log_info "Startup verification completed"
}

# ‰ΩøÁî®ÊñπÊ≥ï„ÅÆË°®Á§∫
show_usage_instructions() {
    log_step "Showing usage instructions..."
    
    cat << EOF

üéâ Hive Small Colony started successfully!

üìã Next Steps:
1. Attach to the session: tmux attach-session -t $HIVE_SESSION
2. Run quickstart guide: 
   - Left pane: python examples/quickstart/01_basic_communication.py queen
   - Right pane: python examples/quickstart/01_basic_communication.py developer
3. Check communication: ./scripts/check-comb.sh
4. Launch Claude Code when ready: claude (in any pane)
5. Shutdown when done: ./scripts/shutdown-hive.sh

üîß tmux Controls:
- Switch between panes: Alt + ‚Üê / ‚Üí (Ê•ΩÔºÅ) or Ctrl+B + ‚Üê / ‚Üí
- Click pane with mouse: „Éû„Ç¶„Çπ„ÇØ„É™„ÉÉ„ÇØ„ÅßpaneÁßªÂãï
- Detach from session: Ctrl+B then d
- Kill session: Ctrl+B then :kill-session

üìä Workers:
- Left pane (0): Queen Worker - Project management (bash terminal)
- Right pane (1): Developer Worker - Implementation (bash terminal)

üìÅ Important Directories:
- Logs: $LOG_DIR
- Comb: $COMB_DIR
- Prompts: $PROMPTS_DIR

üöÄ Start with the quickstart guide, then use Claude Code for actual development!

EOF
}

# „É°„Ç§„É≥ÂÆüË°å„Éï„É≠„Éº
main() {
    log_info "üêù Starting Hive Small Colony..."
    log_info "Colony Size: $COLONY_SIZE"
    log_info "Hive Directory: $HIVE_DIR"
    log_info "Session Name: $HIVE_SESSION"
    
    # ÂÆüË°åÂâç„ÉÅ„Çß„ÉÉ„ÇØ
    check_dependencies
    setup_directories
    check_existing_session
    
    # WorkerÁí∞Â¢É„ÅÆÊ∫ñÂÇô
    create_worker_prompts
    
    # tmuxËµ∑Âãï
    create_tmux_session
    
    # Ëµ∑ÂãïÁ¢∫Ë™ç
    verify_startup
    
    # ‰ΩøÁî®ÊñπÊ≥ï„ÅÆË°®Á§∫
    show_usage_instructions
    
    log_info "üéâ Hive Small Colony startup completed!"
}

# „Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞
trap 'log_error "Script interrupted"; exit 1' INT TERM

# „É°„Ç§„É≥Âá¶ÁêÜÂÆüË°å
main "$@"