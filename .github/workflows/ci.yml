name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.12"

jobs:
  quality:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
          version: "latest"

    - name: Install dependencies
      run: |
        uv sync --extra dev

    - name: Run quality checks
      run: |
        make quality-check

  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y tmux

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
          version: "latest"

    - name: Install dependencies
      run: |
        uv sync --extra dev

    - name: Run tests with coverage
      run: |
        uv run pytest tests/ -v --cov=. --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
          version: "latest"

    - name: Build package
      run: |
        uv build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  ci-complete:
    runs-on: ubuntu-latest
    needs: [quality, test, build]
    if: always()
    
    steps:
    - name: Check CI Results
      run: |
        if [[ "${{ needs.quality.result }}" == "success" && "${{ needs.test.result }}" == "success" && "${{ needs.build.result }}" == "success" ]]; then
          echo "✅ All CI jobs completed successfully"
          exit 0
        else
          echo "❌ Some CI jobs failed:"
          echo "  Quality: ${{ needs.quality.result }}"
          echo "  Test: ${{ needs.test.result }}"
          echo "  Build: ${{ needs.build.result }}"
          exit 1
        fi